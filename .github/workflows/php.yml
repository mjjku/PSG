name: "Proxy Subscription Generator (PSG) — Proxy-aware"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *' # Run every hour exactly

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  TZ: 'Asia/Tehran'
  JITTER_MAX_SECONDS: '120'
  MAX_ATTEMPTS: '4'
  DEFAULT_TIMEOUT_SECONDS: '900'
  LARGE_TIMEOUT_SECONDS: '3600'
  CONTINUE_ON_FAIL: '1'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, curl, sockets
          tools: composer

      - name: Export optional proxy env (if provided in secrets)
        env:
          PROXY_URL: ${{ secrets.PROXY_URL || '' }}
          PROXY_USER: ${{ secrets.PROXY_USER || '' }}
          PROXY_PASS: ${{ secrets.PROXY_PASS || '' }}
        run: |
          if [ -n "${PROXY_URL:-}" ]; then
            echo "Proxy configured. Exporting proxy environment variables."
            if [ -n "${PROXY_USER:-}" ] && [ -n "${PROXY_PASS:-}" ]; then
              AUTH=$(python3 - <<'PY'
import urllib.parse, os
u=os.environ.get("PROXY_USER")
p=os.environ.get("PROXY_PASS")
print(urllib.parse.quote(u, safe='') + ':' + urllib.parse.quote(p, safe=''))
PY
)
              export_proxy="http://${AUTH}@${PROXY_URL#http://}"
            else
              export_proxy="${PROXY_URL}"
            fi
            echo "http_proxy=${export_proxy}" >> $GITHUB_ENV
            echo "https_proxy=${export_proxy}" >> $GITHUB_ENV
            echo "HTTP_PROXY=${export_proxy}" >> $GITHUB_ENV
            echo "HTTPS_PROXY=${export_proxy}" >> $GITHUB_ENV
          else
            echo "No PROXY_URL secret set — running without upstream proxy."
          fi

      - name: Patch precheck.php for PHP 8 compatibility
        run: |
          if [ -f "scripts/precheck.php" ]; then
            sed -i 's/stream_set_blocking(\([^,]*\), *0)/stream_set_blocking(\1, false)/g' scripts/precheck.php
            sed -i 's/stream_set_blocking(\([^,]*\), *1)/stream_set_blocking(\1, true)/g' scripts/precheck.php
            echo "✅ Patch applied to scripts/precheck.php"
          else
            echo "ℹ️ scripts/precheck.php not found, skipping patch."
          fi

      - name: Create run wrapper
        run: |
          mkdir -p .github/scripts .github/logs
          cat > .github/scripts/run_php_retry.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
MAX_ATTEMPTS=${MAX_ATTEMPTS:-4}
TIMEOUT_SECONDS=${TIMEOUT_SECONDS:-900}
CONTINUE_ON_FAIL=${CONTINUE_ON_FAIL:-1}
JITTER_MAX_SECONDS=${JITTER_MAX_SECONDS:-120}
SCRIPT="$1"; shift || true
for i in $(seq 1 $MAX_ATTEMPTS); do
  echo "Attempt $i/$MAX_ATTEMPTS: php $SCRIPT $*"
  if timeout --foreground ${TIMEOUT_SECONDS}s php "$SCRIPT" "$@"; then
    exit 0
  fi
  if [ "$i" -lt "$MAX_ATTEMPTS" ]; then
    JITTER=$((RANDOM % JITTER_MAX_SECONDS + 1))
    sleep $((5 * 2**(i-1) + JITTER))
  fi
done
echo "ALL ATTEMPTS FAILED for $SCRIPT" | tee -a .github/logs/failed_steps.log
if [ "${CONTINUE_ON_FAIL}" = "1" ]; then
  exit 0
fi
exit 1
EOF
          chmod +x .github/scripts/run_php_retry.sh

      - name: Generate Full Subscriptions
        env:
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          CONTINUE_ON_FAIL: ${{ env.CONTINUE_ON_FAIL }}
          TIMEOUT_SECONDS: ${{ env.LARGE_TIMEOUT_SECONDS }}
          JITTER_MAX_SECONDS: ${{ env.JITTER_MAX_SECONDS }}
        run: |
          set -Eeuo pipefail
          echo "--- Starting Full PSG Generation ---"
          ./.github/scripts/run_php_retry.sh channelsAssets.php || { echo "❌ channelsAssets.php failed"; }
          ./.github/scripts/run_php_retry.sh get.php || { echo "❌ get.php failed"; }
          ./.github/scripts/run_php_retry.sh duplicate.php || { echo "❌ duplicate.php failed"; }
          ./.github/scripts/run_php_retry.sh sort.php || { echo "❌ sort.php failed"; }
          ./.github/scripts/run_php_retry.sh toSingbox.php || { echo "❌ toSingbox.php failed"; }
          ./.github/scripts/run_php_retry.sh toClashSurfboard.php || { echo "❌ toClashSurfboard.php failed"; }
          if [ -f hiddifyWarp.php ]; then ./.github/scripts/run_php_retry.sh hiddifyWarp.php || { echo "❌ hiddifyWarp.php failed"; }; fi
          echo "--- ✅ Full Generation Complete ---"

      - name: Generate Lite Subscriptions
        env:
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          CONTINUE_ON_FAIL: ${{ env.CONTINUE_ON_FAIL }}
          TIMEOUT_SECONDS: ${{ env.DEFAULT_TIMEOUT_SECONDS }}
          JITTER_MAX_SECONDS: ${{ env.JITTER_MAX_SECONDS }}
        run: |
          set -Eeuo pipefail
          if [ -d lite ]; then
            echo "--- Starting Lite PSG Generation ---"
            pushd lite
            ../../.github/scripts/run_php_retry.sh channelsAssets.php || { echo "❌ channelsAssets.php failed"; }
            ../../.github/scripts/run_php_retry.sh get.php || { echo "❌ get.php failed"; }
            ../../.github/scripts/run_php_retry.sh duplicate.php || { echo "❌ duplicate.php failed"; }
            ../../.github/scripts/run_php_retry.sh sort.php || { echo "❌ sort.php failed"; }
            ../../.github/scripts/run_php_retry.sh toSingbox.php || { echo "❌ toSingbox.php failed"; }
            ../../.github/scripts/run_php_retry.sh toClashSurfboard.php || { echo "❌ toClashSurfboard.php failed"; }
            popd
            echo "--- ✅ Lite Generation Complete ---"
          fi

      - name: Generate HTML Index Page
        run: |
          set -Eeuo pipefail
          echo "--- Generating HTML index page ---"
          if [ -f generate_page.php ]; then php generate_page.php || { echo "❌ generate_page.php failed"; }; fi
          echo "--- ✅ HTML index page generated ---"

      - name: Upload artifacts (always)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: psg-output-${{ github.run_id }}
          path: |
            .github/logs/**
            index.html
            lite/**
          if-no-files-found: ignore

      - name: Commit and Push Files
        env:
          TOKEN: ${{ secrets.PAT_TOKEN || github.token }}
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "🚀 Subscription Update | $(TZ='Asia/Tehran' date '+%Y-%m-%d %H:%M:%S')" || echo "ℹ️ No changes to commit."
          git pull --rebase --autostash origin "${GITHUB_REF#refs/heads/}" || true
          git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }} HEAD:${GITHUB_REF}
