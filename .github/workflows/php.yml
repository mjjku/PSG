name: "Proxy Subscription Generator (PSG)"

on:
  workflow_dispatch:
  schedule:
    - cron: '7 * * * *' # every hour at minute 7 (avoids top-of-hour spikes)

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  TZ: 'Asia/Tehran'
  JITTER_MAX_SECONDS: '120'
  MAX_ATTEMPTS: '4'
  DEFAULT_TIMEOUT_SECONDS: '900'
  LARGE_TIMEOUT_SECONDS: '3600'
  CONTINUE_ON_FAIL: '1'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, curl, sockets
          tools: composer

      - name: Composer cache
        if: ${{ hashFiles('**/composer.lock') != '' }}
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP deps (if composer.json exists)
        run: |
          set -Eeuo pipefail
          if [ -f composer.json ]; then
            composer install --no-interaction --prefer-dist --no-progress --no-dev
          fi

      - name: Randomized start (anti-burst)
        run: |
          s=$(( RANDOM % $JITTER_MAX_SECONDS ))
          echo "Sleeping $s seconds to avoid thundering herd"
          sleep "$s"

      - name: Preflight & PHP8 patches
        run: |
          set -Eeuo pipefail
          php -v
          echo "::group::PHP extensions"
          php -m | grep -E '^(curl|mbstring|sockets)$' || true
          echo "::endgroup::"
          if [ -f "scripts/precheck.php" ]; then
            sed -i 's/stream_set_blocking(\([^,]*\), *0)/stream_set_blocking(\1, false)/g' scripts/precheck.php || true
            sed -i 's/stream_set_blocking(\([^,]*\), *1)/stream_set_blocking(\1, true)/g' scripts/precheck.php || true
            echo "Patched scripts/precheck.php for PHP8 bool args."
          fi
          if command -v find >/dev/null; then
            find . -type f -name '*.php' ! -path './vendor/*' -print0 | xargs -0 -I{} bash -c 'php -l "{}" || true'
          fi

      - name: Prepare resilient runner scripts & logs
        run: |
          set -Eeuo pipefail
          mkdir -p .github/scripts .github/logs
          cat > .github/scripts/run_php_retry.sh <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
MAX_ATTEMPTS=${MAX_ATTEMPTS:-4}
TIMEOUT_SECONDS=${TIMEOUT_SECONDS:-900}
CONTINUE_ON_FAIL=${CONTINUE_ON_FAIL:-1}
SCRIPT="$1"
shift || true
for i in $(seq 1 $MAX_ATTEMPTS); do
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Attempt $i/$MAX_ATTEMPTS: php $SCRIPT $*"
  if timeout --foreground ${TIMEOUT_SECONDS}s php "$SCRIPT" "$@"; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Success: $SCRIPT"
    exit 0
  fi
  rc=$?
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Attempt $i failed (exit $rc) for $SCRIPT"
  if [ "$i" -lt "$MAX_ATTEMPTS" ]; then
    sleep $((5 * 2**(i-1) + RANDOM % 10))
  fi
done
echo "[$(date '+%Y-%m-%d %H:%M:%S')] ALL ATTEMPTS FAILED for $SCRIPT" | tee -a .github/logs/failed_steps.log
if [ "${CONTINUE_ON_FAIL}" = "1" ]; then
  echo "CONTINUE_ON_FAIL=1 => continuing workflow despite failure"
  exit 0
fi
exit 1
EOF
          chmod +x .github/scripts/run_php_retry.sh
          echo "Wrapper script created: .github/scripts/run_php_retry.sh"

      - name: Generate Full subscriptions (resilient)
        env:
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          CONTINUE_ON_FAIL: ${{ env.CONTINUE_ON_FAIL }}
          TIMEOUT_SECONDS: ${{ env.DEFAULT_TIMEOUT_SECONDS }}
        run: |
          set -Eeuo pipefail
          echo "--- Starting Full PSG Generation ---"
          ./.github/scripts/run_php_retry.sh channelsAssets.php
          ./.github/scripts/run_php_retry.sh get.php
          ./.github/scripts/run_php_retry.sh duplicate.php
          ./.github/scripts/run_php_retry.sh sort.php
          ./.github/scripts/run_php_retry.sh toSingbox.php
          ./.github/scripts/run_php_retry.sh toClashSurfboard.php
          if [ -f hiddifyWarp.php ]; then
            ./.github/scripts/run_php_retry.sh hiddifyWarp.php
          fi
          echo "--- Full Generation Done ---"

      - name: Generate Lite subscriptions (resilient)
        env:
          MAX_ATTEMPTS: ${{ env.MAX_ATTEMPTS }}
          CONTINUE_ON_FAIL: ${{ env.CONTINUE_ON_FAIL }}
          TIMEOUT_SECONDS: ${{ env.DEFAULT_TIMEOUT_SECONDS }}
        run: |
          set -Eeuo pipefail
          echo "--- Starting Lite PSG Generation ---"
          if [ -d lite ]; then
            pushd lite
            ../../.github/scripts/run_php_retry.sh channelsAssets.php
            ../../.github/scripts/run_php_retry.sh get.php
            ../../.github/scripts/run_php_retry.sh duplicate.php
            ../../.github/scripts/run_php_retry.sh sort.php
            ../../.github/scripts/run_php_retry.sh toSingbox.php
            ../../.github/scripts/run_php_retry.sh toClashSurfboard.php
            popd
          else
            echo "lite/ not found â€” skipping."
          fi
          echo "--- Lite Generation Done ---"

      - name: Generate HTML index page
        run: |
          set -Eeuo pipefail
          if [ -f generate_page.php ]; then
            php generate_page.php || echo "generate_page.php returned non-zero (logged) â€” continuing"
          else
            echo "generate_page.php not found; skipped."
          fi

      - name: Upload logs & artifacts (always)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: psg-output-${{ github.run_id }}
          path: |
            .github/logs/**
            index.html
            *.json
            *.txt
            lite/**
          if-no-files-found: ignore
          retention-days: 7

      - name: Commit and push changes (safe)
        env:
          PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}
        run: |
          set -Eeuo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          msg="ðŸš€ Subscription Update | $(date '+%Y-%m-%d %H:%M:%S %Z')"
          git commit -m "$msg"
          BRANCH=${GITHUB_REF##*/}
          if [ -n "${PUSH_TOKEN:-}" ]; then
            git remote set-url origin https://x-access-token:${PUSH_TOKEN}@github.com/${{ github.repository }}.git
          fi
          git pull --rebase --autostash origin "$BRANCH" || true
          git push origin HEAD:"$BRANCH"
