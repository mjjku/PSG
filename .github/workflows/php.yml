name: "Proxy Subscription Generator (PSG)"

on:
  workflow_dispatch:
  schedule:
    - cron: '*/60 * * * *' # Runs every 60 minutes

permissions:
  contents: write

# Ensure only one run per ref/branch at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TZ: Asia/Tehran
  JITTER_MAX_SECONDS: 120 # randomized sleep before network-heavy steps (anti-burst)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 2) PHP 8.3 + extensions + Composer
      - name: Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, curl, sockets
          tools: composer

      # 2.1) Cache Composer (if lockfile exists)
      - name: Composer cache
        if: hashFiles('**/composer.lock') != ''
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # 2.2) Install PHP deps if composer.json exists
      - name: Install PHP dependencies (if any)
        run: |
          set -Eeuo pipefail
          if [ -f composer.json ]; then
            composer install --no-interaction --prefer-dist --no-progress --no-dev
          fi

      # 2.3) Randomized jitter to avoid thundering herd
      - name: Randomized start (anti-burst)
        run: |
          s=$(( RANDOM % JITTER_MAX_SECONDS ))
          echo "Sleeping $s seconds to avoid hitting remote services at the top of the hour."
          sleep "$s"

      # 2.4) Preflight checks + PHP8 patch
      - name: Preflight & PHP 8 compatibility patch
        run: |
          set -Eeuo pipefail
          php -v
          echo "::group::PHP extensions"
          php -m | grep -E '^(curl|mbstring|sockets)$' | sort || true
          echo "::endgroup::"
          # Patch for stream_set_blocking(bool) on PHP 8+
          if [ -f "scripts/precheck.php" ]; then
            sed -i 's/stream_set_blocking(\([^,]*\), *0)/stream_set_blocking(\1, false)/g' scripts/precheck.php
            sed -i 's/stream_set_blocking(\([^,]*\), *1)/stream_set_blocking(\1, true)/g' scripts/precheck.php
            echo "Patched scripts/precheck.php for PHP 8 bool args."
          fi
          # Syntax lint (skip vendor)
          echo "::group::PHP lint"
          if command -v find >/dev/null; then
            find . -type f -name '*.php' ! -path './vendor/*' -print0 | xargs -0 -I{} php -l "{}"
          fi
          echo "::endgroup::"

      # 3) Build Full + Lite with retries
      - name: Generate subscriptions (Full + Lite) with retries
        shell: bash
        run: |
          set -Eeuo pipefail
          retry() { # retry MAX CMD...
            local max=${1:-3}; shift
            local n=0
            until "$@"; do
              n=$((n+1))
              if [ "$n" -ge "$max" ]; then
                echo "Command failed after $n attempts: $*"
                return 1
              fi
              sleep $((2**n)) # exponential backoff: 2,4,8s...
            done
          }
          run_php() { echo "â–¶ $1"; retry 3 php "$1"; }

          echo "::group::FULL"
          run_php channelsAssets.php
          run_php get.php
          run_php duplicate.php
          run_php sort.php
          run_php toSingbox.php
          run_php toClashSurfboard.php
          if [ -f hiddifyWarp.php ]; then run_php hiddifyWarp.php; fi
          echo "::endgroup::"

          echo "::group::LITE"
          if [ -d lite ]; then
            ( set -Eeuo pipefail
              cd lite
              run_php channelsAssets.php
              run_php get.php
              run_php duplicate.php
              run_php sort.php
              run_php toSingbox.php
              run_php toClashSurfboard.php
            )
          else
            echo "lite/ directory not found; skipping lite build."
          fi
          echo "::endgroup::"

      # 4) HTML index page
      - name: Generate HTML index page
        run: |
          set -Eeuo pipefail
          if [ -f generate_page.php ]; then
            php generate_page.php
            echo "HTML index generated."
          else
            echo "generate_page.php not found; skipping."
          fi

      # 5) Optional: upload artifacts for quick inspection/download
      - name: Upload build artifacts (optional)
        uses: actions/upload-artifact@v4
        with:
          name: psg-output-${{ github.run_id }}
          path: |
            index.html
            *.json
            *.yaml
            *.yml
            *.txt
            lite/**
          if-no-files-found: ignore
          retention-days: 7

      # 6) Commit & push only when there are changes
      - name: Commit and push changes
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          set -Eeuo pipefail
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          msg="ðŸš€ Subscription Update | $(date '+%Y-%m-%d %H:%M:%S %Z')"
          git commit -m "$msg"
          # Rebase to reduce push conflicts if repo changed meanwhile
          git pull --rebase --autostash origin "$GITHUB_REF_NAME" || true
          git push origin HEAD:"$GITHUB_REF_NAME"
